{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Imports\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from skimage.io import imread\n",
    "import skimage\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "import matplotlib\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Spectogram</th>\n",
       "      <th>Meta_Label</th>\n",
       "      <th>New_Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>https://drive.google.com/uc?export=download&amp;id...</td>\n",
       "      <td>320kpbs</td>\n",
       "      <td>192 kbps (LAME)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>https://drive.google.com/uc?export=download&amp;id...</td>\n",
       "      <td>320 kbps</td>\n",
       "      <td>320 kbps (LAME)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>https://drive.google.com/uc?export=download&amp;id...</td>\n",
       "      <td>320 kbps</td>\n",
       "      <td>128 kbps (CBR)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>https://drive.google.com/uc?export=download&amp;id...</td>\n",
       "      <td>128 kbps</td>\n",
       "      <td>128 kpbs (AAC)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>https://drive.google.com/uc?export=download&amp;id...</td>\n",
       "      <td>320 kbps</td>\n",
       "      <td>128 kbps (LAME)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          Spectogram Meta_Label  \\\n",
       "0  https://drive.google.com/uc?export=download&id...    320kpbs   \n",
       "1  https://drive.google.com/uc?export=download&id...   320 kbps   \n",
       "2  https://drive.google.com/uc?export=download&id...   320 kbps   \n",
       "3  https://drive.google.com/uc?export=download&id...   128 kbps   \n",
       "4  https://drive.google.com/uc?export=download&id...   320 kbps   \n",
       "\n",
       "         New_Label  \n",
       "0  192 kbps (LAME)  \n",
       "1  320 kbps (LAME)  \n",
       "2   128 kbps (CBR)  \n",
       "3   128 kpbs (AAC)  \n",
       "4  128 kbps (LAME)  "
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "drive_and_label = pd.read_excel('Specogram Processing\\Spectogram_Data_v1.xlsx')\n",
    "drive_and_label.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "drive_and_label.iloc[0]['Spectogram']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "im = imread('https://drive.google.com/uc?export=download&id=1xyNHbQEGoqfgWsVl8algfpX5EdQdrqEm', as_grey = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculating 'score' by picture\n",
    "Here we are giving an overall score to each picture. We are trying to get an overall sense of how many black pixels there are. We are also trying to locate the shelf."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Program Files\\Anaconda3\\lib\\site-packages\\skimage\\io\\_plugins\\matplotlib_plugin.py:51: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n",
      "  out_of_range_float = (np.issubdtype(image.dtype, np.float) and\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x291af746278>"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x291add4a860>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "im = imread(drive_and_label.iloc[0]['Spectogram'], as_grey = True)\n",
    "im = im[58:]\n",
    "im.shape\n",
    "skimage.io.imshow(im)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(330, 624)"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "im.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "im[329][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "623\n"
     ]
    }
   ],
   "source": [
    "#Looking at first column of data, should be a height of 0\n",
    "y_bound, x_bound = im.shape\n",
    "\n",
    "final_score = []\n",
    "\n",
    "for ii in range(0, x_bound-1):\n",
    "    #Reset Score per-coluimn\n",
    "    score = 0\n",
    "    for jj in range(0, y_bound-1): #Loop down each \"x column\"\n",
    "        try:\n",
    "            if im[ii, jj] == 0:\n",
    "                score -= 1\n",
    "            elif im[ii,jj] != 0:\n",
    "                score += 1\n",
    "        except:\n",
    "            'IndexError'\n",
    "\n",
    "    final_score.append(score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "im = imread(drive_and_label.iloc[0]['Spectogram'], as_grey = True)\n",
    "\n",
    "#Crop Picture to get rid of top section\n",
    "#50 pixels is the standard header\n",
    "im = im[58:]\n",
    "\n",
    "#Find Bounds of image (to give baseline)\n",
    "y_bound, x_bound = im.shape\n",
    "\n",
    "#Looping across the x-axis (predefined resolution)\n",
    "final_score = []\n",
    "for ii in range(0, x_bound-1):\n",
    "    #Reset Score per-coluimn\n",
    "    score = 0\n",
    "    for jj in range(0, y_bound-1): #Loop down each \"x column\"\n",
    "        try:\n",
    "            if im[ii, jj] == 0:\n",
    "                score -= 1\n",
    "            elif im[ii,jj] != 0:\n",
    "                score += 1\n",
    "        except:\n",
    "            'IndexError'\n",
    "\n",
    "    final_score.append(score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n"
     ]
    }
   ],
   "source": [
    "print(score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "d = {}\n",
    "\n",
    "for idx, row in drive_and_label.iterrows():\n",
    "    #Find picture from GD link\n",
    "    im = imread(row['Spectogram'], as_grey = True)\n",
    "\n",
    "    #Crop Picture to get rid of top section\n",
    "    #50 pixels is the standard header\n",
    "    im = im[58:]\n",
    "\n",
    "    #Find Bounds of image (to give baseline)\n",
    "    y_bound, x_bound = im.shape\n",
    "\n",
    "    #Looping across the x-axis (predefined resolution)\n",
    "    final_score = []\n",
    "    for ii in range(0, x_bound-1):\n",
    "        #Reset Score per-coluimn\n",
    "        score = 0\n",
    "        for jj in range(0, y_bound-1): #Loop down each \"x column\"\n",
    "            try:\n",
    "                if im[ii, jj] == 0:\n",
    "                    score -= 1\n",
    "                elif im[ii,jj] != 0:\n",
    "                    score += 1\n",
    "            except:\n",
    "                'IndexError'\n",
    "\n",
    "        final_score.append(score)\n",
    "    d[idx] = final_score "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('SCORE_v1.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Converting Spectograms to CIFAR-10 Dataset (OUTDATED)\n",
    "\n",
    "\n",
    "Our goal here is to take each spectogram and turn its picture into raw  data. Each column corresponds to color values of each pixel of the image (after the first column, which is the label). Each of our pictures are cropped to only the spectograph which i\n",
    "\n",
    "This data is concidered raw because it simply encodes the image itself. We are going to be use different types of encoding such as DAISY and a Color Histogram."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#https://stackoverflow.com/questions/39382412/crop-center-portion-of-a-numpy-image/39382475\n",
    "def crop_center(img,cropx,cropy):\n",
    "    y,x,z = img.shape\n",
    "    startx = x//2-(cropx//2)\n",
    "    starty = y//2-(cropy//2) \n",
    "    return img[starty:starty+cropy,startx:startx+cropx]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "d = {}\n",
    "#Loop through each Google Drive link\n",
    "for idx, row in drive_and_label.iterrows():\n",
    "    \n",
    "    #Creating a 2-D Array with just pixel values\n",
    "    #print ('Finding feature array...')\n",
    "    im = imread(row['Spectogram'])\n",
    "    im_crop = crop_center(im, 505, 295)\n",
    "    features = im_crop.flatten()\n",
    "    #print('... array found.')\n",
    "    \n",
    "    #Adding features to dictionary \n",
    "    d[idx] = features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df = pd.DataFrame.from_dict(d)\n",
    "df = df.T\n",
    "df.insert(0, 'label', drive_and_label['New_Label'])\n",
    "df.tail()\n",
    "\n",
    "df.to_csv('SCORE_v1.csv', sep = ',')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Now we have to reduce the size of the dataset.\n",
    "\n",
    "Before we were at a sparse matrix of (5,446926), now we have a more dense matrix at (5,~8000)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "backup_df = df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#No need for columns that are identical (all 0 values)\n",
    "df = df.loc[:, (df != 0).any(axis=0)]"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "from pandas import ExcelWriter\n",
    "\n",
    "writer = ExcelWriter('RAW_FEATURES.xlsx')\n",
    "writer.save()\n",
    "df.to_excel(writer, 'RGB Encoding')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Machine Learning (Finally)\n",
    "\n",
    "thoughts on why it's low:\n",
    "- crowd source sorting\n",
    "- too hard of a problem\n",
    "- not enough training data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('Python_ML\\SCORE.csv', header = None)\n",
    "del df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>330</th>\n",
       "      <th>331</th>\n",
       "      <th>332</th>\n",
       "      <th>333</th>\n",
       "      <th>334</th>\n",
       "      <th>335</th>\n",
       "      <th>336</th>\n",
       "      <th>337</th>\n",
       "      <th>338</th>\n",
       "      <th>339</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>192 kbps (LAME)</td>\n",
       "      <td>-1</td>\n",
       "      <td>-2</td>\n",
       "      <td>-3</td>\n",
       "      <td>-4</td>\n",
       "      <td>-5</td>\n",
       "      <td>-6</td>\n",
       "      <td>-7</td>\n",
       "      <td>-6</td>\n",
       "      <td>-5</td>\n",
       "      <td>...</td>\n",
       "      <td>278</td>\n",
       "      <td>277</td>\n",
       "      <td>276</td>\n",
       "      <td>275</td>\n",
       "      <td>274</td>\n",
       "      <td>273</td>\n",
       "      <td>272</td>\n",
       "      <td>271</td>\n",
       "      <td>270</td>\n",
       "      <td>269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>320 kbps (LAME)</td>\n",
       "      <td>-1</td>\n",
       "      <td>-2</td>\n",
       "      <td>-3</td>\n",
       "      <td>-4</td>\n",
       "      <td>-5</td>\n",
       "      <td>-6</td>\n",
       "      <td>-7</td>\n",
       "      <td>-6</td>\n",
       "      <td>-5</td>\n",
       "      <td>...</td>\n",
       "      <td>278</td>\n",
       "      <td>277</td>\n",
       "      <td>276</td>\n",
       "      <td>275</td>\n",
       "      <td>274</td>\n",
       "      <td>273</td>\n",
       "      <td>272</td>\n",
       "      <td>271</td>\n",
       "      <td>270</td>\n",
       "      <td>269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>128 kbps (CBR)</td>\n",
       "      <td>-1</td>\n",
       "      <td>-2</td>\n",
       "      <td>-3</td>\n",
       "      <td>-4</td>\n",
       "      <td>-5</td>\n",
       "      <td>-6</td>\n",
       "      <td>-7</td>\n",
       "      <td>-6</td>\n",
       "      <td>-5</td>\n",
       "      <td>...</td>\n",
       "      <td>278</td>\n",
       "      <td>277</td>\n",
       "      <td>276</td>\n",
       "      <td>275</td>\n",
       "      <td>274</td>\n",
       "      <td>273</td>\n",
       "      <td>272</td>\n",
       "      <td>271</td>\n",
       "      <td>270</td>\n",
       "      <td>269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>128 kpbs (AAC)</td>\n",
       "      <td>-1</td>\n",
       "      <td>-2</td>\n",
       "      <td>-3</td>\n",
       "      <td>-4</td>\n",
       "      <td>-5</td>\n",
       "      <td>-6</td>\n",
       "      <td>-7</td>\n",
       "      <td>-6</td>\n",
       "      <td>-5</td>\n",
       "      <td>...</td>\n",
       "      <td>278</td>\n",
       "      <td>277</td>\n",
       "      <td>276</td>\n",
       "      <td>275</td>\n",
       "      <td>274</td>\n",
       "      <td>273</td>\n",
       "      <td>272</td>\n",
       "      <td>271</td>\n",
       "      <td>270</td>\n",
       "      <td>269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>128 kbps (LAME)</td>\n",
       "      <td>-1</td>\n",
       "      <td>-2</td>\n",
       "      <td>-3</td>\n",
       "      <td>-4</td>\n",
       "      <td>-5</td>\n",
       "      <td>-6</td>\n",
       "      <td>-7</td>\n",
       "      <td>-6</td>\n",
       "      <td>-5</td>\n",
       "      <td>...</td>\n",
       "      <td>278</td>\n",
       "      <td>277</td>\n",
       "      <td>276</td>\n",
       "      <td>275</td>\n",
       "      <td>274</td>\n",
       "      <td>273</td>\n",
       "      <td>272</td>\n",
       "      <td>271</td>\n",
       "      <td>270</td>\n",
       "      <td>269</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 340 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               0    1    2    3    4    5    6    7    8    9   ...   330  \\\n",
       "0  192 kbps (LAME)   -1   -2   -3   -4   -5   -6   -7   -6   -5 ...   278   \n",
       "1  320 kbps (LAME)   -1   -2   -3   -4   -5   -6   -7   -6   -5 ...   278   \n",
       "2   128 kbps (CBR)   -1   -2   -3   -4   -5   -6   -7   -6   -5 ...   278   \n",
       "3   128 kpbs (AAC)   -1   -2   -3   -4   -5   -6   -7   -6   -5 ...   278   \n",
       "4  128 kbps (LAME)   -1   -2   -3   -4   -5   -6   -7   -6   -5 ...   278   \n",
       "\n",
       "   331  332  333  334  335  336  337  338  339  \n",
       "0  277  276  275  274  273  272  271  270  269  \n",
       "1  277  276  275  274  273  272  271  270  269  \n",
       "2  277  276  275  274  273  272  271  270  269  \n",
       "3  277  276  275  274  273  272  271  270  269  \n",
       "4  277  276  275  274  273  272  271  270  269  \n",
       "\n",
       "[5 rows x 340 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "scalar = StandardScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\spitf_000\\AppData\\Roaming\\Python\\Python35\\site-packages\\sklearn\\utils\\validation.py:475: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n"
     ]
    }
   ],
   "source": [
    "#Finding and converting raw data\n",
    "rawY = df.iloc[0:799, 0].values\n",
    "rawX = df.iloc[0:799, 1:].values\n",
    "scalar.fit(rawX)\n",
    "rawX = scalar.transform(rawX)\n",
    "\n",
    "#Finding and converting test data\n",
    "rawY_test = df.iloc[800:, 0].values\n",
    "rawX_test = df.iloc[800:, 1:].values\n",
    "\n",
    "scalar.fit(rawX_test)\n",
    "rawX_test = scalar.transform(rawX_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training accuracy: 0.138924\n",
      "Testing accuracy: 0.127168\n"
     ]
    }
   ],
   "source": [
    "from sklearn.dummy import DummyClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "classifier = DummyClassifier(strategy='most_frequent')\n",
    "\n",
    "classifier.fit(rawX, rawY)\n",
    "\n",
    "#fit(rawX, rawY)\n",
    "\n",
    "print(\"Training accuracy: %0.6f\" % accuracy_score(rawY, classifier.predict(rawX)))\n",
    "print(\"Testing accuracy: %0.6f\" % accuracy_score(rawY_test, classifier.predict(rawX_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## K-Fold Cross Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df.head()\n",
    "del df['Unnamed: 0']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\spitf_000\\AppData\\Roaming\\Python\\Python35\\site-packages\\sklearn\\utils\\validation.py:475: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n"
     ]
    }
   ],
   "source": [
    "#Finding and converting raw data\n",
    "Y = df.iloc[:799, 0].values.astype(str)\n",
    "X = df.iloc[:799, 1:].values.astype(float)\n",
    "scalar.fit(X)\n",
    "X = scalar.transform(X)\n",
    "\n",
    "#Finding and converting test data\n",
    "Y_test = df.iloc[800:, 0].values\n",
    "X_test = df.iloc[800:, 1:].values\n",
    "\n",
    "scalar.fit(X_test)\n",
    "X_test = scalar.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn import model_selection\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.svm import SVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LR: 0.266358 (0.092861)\n",
      "KNN: 0.260088 (0.080674)\n",
      "TREE: 0.214812 (0.058944)\n",
      "SVM: 0.313612 (0.103583)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nTDC0AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x291af779898>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# prepare configuration for cross validation test harness\n",
    "seed = 123\n",
    "# prepare models\n",
    "models = []\n",
    "models.append(('LR', LogisticRegression()))\n",
    "models.append(('KNN', KNeighborsClassifier()))\n",
    "models.append(('TREE', DecisionTreeClassifier()))\n",
    "models.append(('SVM', SVC()))\n",
    "\n",
    "# evaluate each model in turn\n",
    "results = []\n",
    "names = []\n",
    "scoring = 'accuracy'\n",
    "for name, model in models:\n",
    "    kfold = model_selection.KFold(n_splits=10, random_state=seed)\n",
    "    cv_results = model_selection.cross_val_score(model, X, Y, cv=kfold, scoring=scoring)\n",
    "    results.append(cv_results)\n",
    "    names.append(name)\n",
    "    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n",
    "    print(msg)\n",
    "# boxplot algorithm comparison\n",
    "fig = plt.figure()\n",
    "fig.suptitle('Algorithm Comparison')\n",
    "ax = fig.add_subplot(111)\n",
    "plt.boxplot(results)\n",
    "ax.set_xticklabels(names)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Using a linear kernel ---\n",
      "C = 0.0001\n",
      "Test accuracy: 0.121387\n",
      "C = 0.001\n",
      "Test accuracy: 0.132948\n",
      "C = 0.01\n",
      "Test accuracy: 0.115607\n",
      "C = 0.1\n",
      "Test accuracy: 0.104046\n",
      "C = 1.0\n",
      "Test accuracy: 0.104046\n",
      "C = 10.0\n",
      "Test accuracy: 0.057803\n",
      "C = 100.0\n",
      "Test accuracy: 0.104046\n",
      "C = 1000.0\n",
      "Test accuracy: 0.098266\n",
      "--- Using a poly kernel ---\n",
      "C = 0.0001\n",
      "Test accuracy: 0.127168\n",
      "C = 0.001\n",
      "Test accuracy: 0.127168\n",
      "C = 0.01\n",
      "Test accuracy: 0.127168\n",
      "C = 0.1\n",
      "Test accuracy: 0.132948\n",
      "C = 1.0\n",
      "Test accuracy: 0.138728\n",
      "C = 10.0\n",
      "Test accuracy: 0.115607\n",
      "C = 100.0\n",
      "Test accuracy: 0.104046\n",
      "C = 1000.0\n",
      "Test accuracy: 0.098266\n",
      "--- Using a poly kernel ---\n",
      "C = 0.0001\n",
      "Test accuracy: 0.127168\n",
      "C = 0.001\n",
      "Test accuracy: 0.127168\n",
      "C = 0.01\n",
      "Test accuracy: 0.127168\n",
      "C = 0.1\n",
      "Test accuracy: 0.127168\n",
      "C = 1.0\n",
      "Test accuracy: 0.138728\n",
      "C = 10.0\n",
      "Test accuracy: 0.132948\n",
      "C = 100.0\n",
      "Test accuracy: 0.127168\n",
      "C = 1000.0\n",
      "Test accuracy: 0.127168\n",
      "--- Using a rbf kernel ---\n",
      "C = 0.0001\n",
      "Test accuracy: 0.127168\n",
      "C = 0.001\n",
      "Test accuracy: 0.127168\n",
      "C = 0.01\n",
      "Test accuracy: 0.127168\n",
      "C = 0.1\n",
      "Test accuracy: 0.109827\n",
      "C = 1.0\n",
      "Test accuracy: 0.109827\n",
      "C = 10.0\n",
      "Test accuracy: 0.098266\n",
      "C = 100.0\n",
      "Test accuracy: 0.086705\n",
      "C = 1000.0\n",
      "Test accuracy: 0.057803\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "\n",
    "switch = False\n",
    "for kernel in ['linear', 'poly', 'poly', 'rbf']:\n",
    "    print('--- Using a {} kernel ---'.format(kernel))\n",
    "    for c_iter in [0.0001,0.001,0.01,0.1,1.0,10.0,100.0,1000.0]:\n",
    "        #Init Classifier given kernel\n",
    "        if kernel == 'poly' and switch == False:\n",
    "            classifier = SVC(kernel=kernel, degree = 2, C=c_iter, random_state=123)\n",
    "            if c_iter == 1000.0:\n",
    "                switch = True #done with first poly move to second\n",
    "        elif kernel == 'poly' and switch == True:\n",
    "            classifier = SVC(kernel=kernel, degree = 3, C=c_iter, random_state=123)\n",
    "        else:\n",
    "            classifier = SVC(kernel=kernel, C=c_iter, random_state=123)\n",
    "        \n",
    "        #Fit classifier\n",
    "        classifier.fit(X, Y)\n",
    "        \n",
    "        #Find Accuracy\n",
    "        print('C = {}'.format(c_iter))\n",
    "        #print(\"Training accuracy: %0.6f\" % accuracy_score(rawY[:1000], classifier.predict(rawX[:1000])))\n",
    "        print(\"Test accuracy: %0.6f\" % accuracy_score(Y_test, classifier.predict(X_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\spitf_000\\AppData\\Roaming\\Python\\Python35\\site-packages\\sklearn\\utils\\validation.py:475: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n"
     ]
    }
   ],
   "source": [
    "#Finding and converting raw data\n",
    "Y = df.iloc[:799, 0].values\n",
    "X = df.iloc[:799, 1:].values\n",
    "scalar.fit(X)\n",
    "X = scalar.transform(X)\n",
    "\n",
    "#Finding and converting test data\n",
    "Y_test = df.iloc[800:, 0].values\n",
    "X_test = df.iloc[800:, 1:].values\n",
    "\n",
    "scalar.fit(X_test)\n",
    "X_test = scalar.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth of 3 leaf sample of 1\n",
      "Training accuracy: 0.150188\n",
      "Test accuracy: 0.127168\n",
      "Depth of 3 leaf sample of 5\n",
      "Training accuracy: 0.150188\n",
      "Test accuracy: 0.127168\n",
      "Depth of 3 leaf sample of 10\n",
      "Training accuracy: 0.138924\n",
      "Test accuracy: 0.127168\n",
      "Depth of 3 leaf sample of 15\n",
      "Training accuracy: 0.138924\n",
      "Test accuracy: 0.127168\n",
      "Depth of 3 leaf sample of 50\n",
      "Training accuracy: 0.138924\n",
      "Test accuracy: 0.127168\n",
      "Depth of 8 leaf sample of 1\n",
      "Training accuracy: 0.150188\n",
      "Test accuracy: 0.127168\n",
      "Depth of 8 leaf sample of 5\n",
      "Training accuracy: 0.150188\n",
      "Test accuracy: 0.127168\n",
      "Depth of 8 leaf sample of 10\n",
      "Training accuracy: 0.138924\n",
      "Test accuracy: 0.127168\n",
      "Depth of 8 leaf sample of 15\n",
      "Training accuracy: 0.138924\n",
      "Test accuracy: 0.127168\n",
      "Depth of 8 leaf sample of 50\n",
      "Training accuracy: 0.138924\n",
      "Test accuracy: 0.127168\n",
      "Depth of 14 leaf sample of 1\n",
      "Training accuracy: 0.150188\n",
      "Test accuracy: 0.127168\n",
      "Depth of 14 leaf sample of 5\n",
      "Training accuracy: 0.150188\n",
      "Test accuracy: 0.127168\n",
      "Depth of 14 leaf sample of 10\n",
      "Training accuracy: 0.138924\n",
      "Test accuracy: 0.127168\n",
      "Depth of 14 leaf sample of 15\n",
      "Training accuracy: 0.138924\n",
      "Test accuracy: 0.127168\n",
      "Depth of 14 leaf sample of 50\n",
      "Training accuracy: 0.138924\n",
      "Test accuracy: 0.127168\n",
      "Depth of 100 leaf sample of 1\n",
      "Training accuracy: 0.150188\n",
      "Test accuracy: 0.127168\n",
      "Depth of 100 leaf sample of 5\n",
      "Training accuracy: 0.150188\n",
      "Test accuracy: 0.127168\n",
      "Depth of 100 leaf sample of 10\n",
      "Training accuracy: 0.138924\n",
      "Test accuracy: 0.127168\n",
      "Depth of 100 leaf sample of 15\n",
      "Training accuracy: 0.138924\n",
      "Test accuracy: 0.127168\n",
      "Depth of 100 leaf sample of 50\n",
      "Training accuracy: 0.138924\n",
      "Test accuracy: 0.127168\n"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "for depth in [3,8,14,100]:\n",
    "    for leaf in [1,5,10,15,50]:\n",
    "        tree = DecisionTreeClassifier(max_depth=depth, min_samples_leaf=leaf, random_state=123)\n",
    "        tree.fit(X, Y)\n",
    "        print('Depth of {} leaf sample of {}'.format(depth, leaf))\n",
    "        print(\"Training accuracy: %0.6f\" % accuracy_score(Y, tree.predict(X)))\n",
    "        print(\"Test accuracy: %0.6f\" % accuracy_score(Y_test, tree.predict(X_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Tom Slesinger\\AppData\\Roaming\\Python\\Python36\\site-packages\\sklearn\\ensemble\\weight_boosting.py:29: DeprecationWarning: numpy.core.umath_tests is an internal NumPy module and should not be imported. It will be removed in a future NumPy release.\n",
      "  from numpy.core.umath_tests import inner1d\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training with 10 number of decision trees.\n",
      "Test accuracy: 0.127168\n",
      "Training with 50 number of decision trees.\n",
      "Test accuracy: 0.127168\n",
      "Training with 100 number of decision trees.\n",
      "Test accuracy: 0.127168\n",
      "Training with 300 number of decision trees.\n",
      "Test accuracy: 0.127168\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "for iter_ in [10,50,100,300]:\n",
    "    r_tree = RandomForestClassifier(n_estimators=iter_, max_depth=8, min_samples_leaf=15, random_state=123)\n",
    "    r_tree.fit(X, Y)\n",
    "    print('Training with {} number of decision trees.'.format(iter_))\n",
    "    #print(\"Training accuracy: %0.6f\" % accuracy_score(Y[:5000], r_tree.predict(X[:5000])))\n",
    "    print(\"Test accuracy: %0.6f\" % accuracy_score(Y_test, r_tree.predict(X_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Neural Network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test accuracy: 0.086705\n",
      "Test accuracy: 0.127168\n",
      "Test accuracy: 0.086705\n",
      "Test accuracy: 0.127168\n"
     ]
    }
   ],
   "source": [
    "from sklearn.neural_network import MLPClassifier\n",
    "for HL_1 in [50,100,200,300]:\n",
    "    multi = MLPClassifier(hidden_layer_sizes=(HL_1), random_state=123)\n",
    "    multi.fit(X, Y)\n",
    "    print(\"Test accuracy: %0.6f\" % accuracy_score(Y_test, multi.predict(X_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Daisy Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from skimage.color import rgb2gray\n",
    "from skimage.feature import daisy as daisy_feature\n",
    "from skimage import data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "daisy_dict = {}\n",
    "#Loop through each Google Drive link\n",
    "for idx, row in drive_and_label.iterrows():\n",
    "    \n",
    "    #Creating a Array with just pixel values\n",
    "    print ('Finding feature array...')\n",
    "    im = imread(row['Spectogram'])\n",
    "    im_crop = crop_center(im, 505, 295)\n",
    "    \n",
    "    #Convert image to grayscale\n",
    "    gray = rgb2gray(im_crop)\n",
    "    \n",
    "    #Convert grayscale to Daisy features\n",
    "    daisy_f = daisy_feature(gray)\n",
    "    features = daisy_f.flatten()\n",
    "    print('... array found.')\n",
    "    \n",
    "    #Adding features to dictionary \n",
    "    daisy_dict[idx] = features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "len(daisy_dict.pop(1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Converting daisy dict into dataframe\n",
    "daisy_df = pd.DataFrame.from_dict(daisy_dict)\n",
    "daisy_df = daisy_df.T\n",
    "daisy_df.insert(0, 'label', drive_and_label['New_Label'])\n",
    "daisy_df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Finding and converting raw data\n",
    "Y = daisy_df.iloc[:799, 0].values\n",
    "X = daisy_df.iloc[:799, 1:].values\n",
    "scalar.fit(X)\n",
    "X = scalar.transform(X)\n",
    "\n",
    "#Finding and converting test data\n",
    "Y_test = daisy_df.iloc[800:, 0].values\n",
    "X_test = daisy_df.iloc[800:, 1:].values\n",
    "\n",
    "scalar.fit(X_test)\n",
    "X_test = scalar.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
